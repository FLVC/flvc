<?php

// $Id$

/**
 * @file
 * Collected FLVC hooks (maybe),  IID only now
 *
 */

/**
 * Implements hook_menu().
 */
function flvc_menu() {
  return array(
    'islandora/object/%islandora_object/toc' => array(
      'title' => 'Table of Contents',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'flvc_toc_menu',
      'page arguments' => array(2),
      'access callback' => 'flvc_toc_access_callback',
      'access arguments' => array(2),
    ),
    'islandora/tree_edit/%islandora_object/TOC' => array(
      'title' => 'Edit Table of Contents',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('flvc_toc_edit_form', 2),
      'access callback' => 'flvc_toc_edit_access_callback',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/report' => array(
      'title' => 'Report',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('flvc_report_form',2),
      'access callback' => 'flvc_report_access_callback',
      'access arguments' => array(2),
    ),
    'islandora/object/%islandora_object/report/results' => array(
      'title' => 'Report Results',
      'type' => MENU_CALLBACK,
      'page callback' => 'flvc_report_results',
      'page arguments' => array(2),
      'access callback' => 'flvc_report_access_callback',
      'access arguments' => array(2),
    ),
    'islandora_solr/autocomplete_text_fields' => array(
      'title' => 'Islandora Solr Luke autocomplete',
      'description' => 'Autocomplete callback to populate solr text fields.',
      'page callback' => 'flvc_solr_autocomplete_text_fields',
      'access arguments' => array(ISLANDORA_METADATA_EDIT),
      'type' => MENU_CALLBACK,
    ),
    'islandora_solr/autocomplete_string_fields' => array(
      'title' => 'Islandora Solr Luke autocomplete',
      'description' => 'Autocomplete callback to populate solr string fields.',
      'page callback' => 'flvc_solr_autocomplete_string_fields',
      'access arguments' => array(ISLANDORA_METADATA_EDIT),
      'type' => MENU_CALLBACK,
    ),
/*
    'admin/reports/google-analytics-all-views' => array(
      'title' => 'Google Analytics Views',
      'description' => "Views based on traffic data for your site.",
      'page callback' => 'flvc_google_analytics_all_views',
      'access arguments' => array(ISLANDORA_METADATA_EDIT),
      'type' => MENU_NORMAL_ITEM,
    ),
    'islandora/reports/google-analytics-all-views' => array(
      'title' => 'Google Analytics Views',
      'description' => "Views based on traffic data for your site.",
      'page callback' => 'flvc_google_analytics_all_views',
      'access arguments' => array(ISLANDORA_METADATA_EDIT),
      'type' => MENU_NORMAL_ITEM,
    ),
*/
  );
}

/**
 * Implements hook_theme().
 */
function flvc_theme() {
  return array(
    'flvc_toc' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-toc',
    ),
    'flvc_toc_edit' => array(
      'arguments' => array('object' => NULL),
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-toc-edit',
    ),
  );
}

/**
 * Determine whether or not to show this modules table of contents tab.
 *
 * @param FedoraObject $object
 *   The book object.
 *
 * @return bool
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function flvc_toc_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $is_book = in_array('islandora:bookCModel', $object->models);
  $is_issue = in_array('islandora:newspaperIssueCModel', $object->models);
  $is_toc = isset($object['TOC']);
  return ($is_book || $is_issue) && $is_toc && islandora_object_access_callback(ISLANDORA_VIEW_OBJECTS, $object);
}

/**
 * Determine whether or not to show this modules table of contents tab.
 *
 * @param FedoraObject $object
 *   The book object.
 *
 * @return bool
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function flvc_toc_edit_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $is_book = in_array('islandora:bookCModel', $object->models);
  $is_issue = in_array('islandora:newspaperIssueCModel', $object->models);
  $is_toc = isset($object['TOC']);
  return ($is_book || $is_issue) && $is_toc && islandora_object_access_callback(ISLANDORA_METADATA_EDIT, $object);
}

/**
 * Renders the Table of Contents local menu task.
 *
 * @param FedoraObject $object
 *   The book object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given books pages.
 */
function flvc_toc_menu(FedoraObject $object) {
  return theme('flvc_toc', array('object' => $object));
  //return '';
}

/**
 * Renders the Table of Contents edit task.
 *
 * @param FedoraObject $object
 *   The book object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given books pages.
 */
/*
function flvc_toc_edit_menu(FedoraObject $object) {
  return theme('flvc_toc_edit', array('object' => $object));
  //return '';
}
*/

function flvc_toc_edit_form(array $form, array &$form_state, AbstractObject $object) {

  $form_state['object'] = $object;

  $toc_string = $object['TOC']->content;

  $form['toctext'] = array(
    '#title' => t('TOC'),
    '#type' => 'textarea',
    '#rows' => 30,
    '#cols' => 100,
    '#default_value' => $toc_string,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update')
  );

  return $form;
}

function flvc_toc_edit_form_submit($form, &$form_state) {
    $tab = "  ";
    $new_json = "";
    $indent_level = 0;
    $in_string = false; 

  $object = $form_state['object'];
  $form_state['redirect'] = "islandora/object/{$object->id}";
  $new_toc = $form_state['values']['toctext'];

  $toc_entries = array();
  $toc_entries = drupal_json_decode($new_toc, true);

  $new_sequence_num = 1;

  $last_sequence_num = 1;

  for ($i=0; $i < count($toc_entries['table_of_contents']); $i++) {

    $old_sequence_num = intval($toc_entries['table_of_contents'][$i]['pagenum']);
    if (($i > 0)&&($old_sequence_num != $last_sequence_num)) {
      $new_sequence_num++;
    }
    $last_sequence_num = $old_sequence_num;
    $toc_entries['table_of_contents'][$i]['pagenum'] = $new_sequence_num;

  }

  $json = drupal_json_encode($toc_entries);

    $len = strlen($json);

    for($c = 0; $c < $len; $c++)
    {
        $char = $json[$c];
        switch($char)
        {
            case '{':
            case '[':
                if(!$in_string)
                {
                    $new_json .= $char . "\n" . str_repeat($tab, $indent_level+1);
                    $indent_level++;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '}':
            case ']':
                if(!$in_string)
                {
                    $indent_level--;
                    $new_json .= "\n" . str_repeat($tab, $indent_level) . $char;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ',':
                if(!$in_string)
                {
                    $new_json .= ",\n" . str_repeat($tab, $indent_level);
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ':':
                if(!$in_string)
                {
                    $new_json .= ": ";
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '"':
                if($c > 0 && $json[$c-1] != '\\')
                {
                    $in_string = !$in_string;
                }
            default:
                $new_json .= $char;
                break;                   
        }
    } 

  try {
    $ds = $object['TOC'];
    //$ds->setContentFromString(str_replace("{","\n{",$json));
    $ds->setContentFromString($new_json);
  }
  catch (exception $e) {
    drupal_set_message(t('An error occurred during TOC datastream update. See watchlog for more information.'), 'error');
    watchdog('islandora',
      'Failed to update TOC datastream.<br/>code: @code<br/>message: @msg',
      array(
        '@code' => $e->getCode(),
        '@msg' => $e->getMessage(),
      ),
      WATCHDOG_ERROR
    );
    return;
  }
  drupal_set_message(t("Successfully Updated TOC Datastream"));
  
}

function flvc_report_access_callback($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  return in_array('islandora:collectionCModel', $object->models) && islandora_object_access_callback(ISLANDORA_METADATA_EDIT, $object);
}

function flvc_report_form(array $form, array &$form_state, AbstractObject $object) {

  $form_state['object'] = $object;

  $form['report_desc'] = array(
      '#type' => 'markup',
      '#markup' => '<h3>' . $object->label . '</h3>Report of object counts for this collection and any child collections, grouped by content model.  Note - counts objects directly under each collection.  Counts do not currently include children of book, newspaper, or serial objects (issue, page, and serial pdf objects).<br><br>',
  );

  $form['show_br'] = array(
      '#type' => 'markup',
      '#markup' => 'Optional - enter beginning and/or ending create dates:<br>',
  );

  $form['createdate1'] = array(
      '#size' => '10',
      '#type' => 'textfield',
      '#title' => 'Created from date (YYYY-MM-DD):',
      '#default_value' => '',
  );

  $form['createdate2'] = array(
      '#size' => '10',
      '#type' => 'textfield',
      '#title' => 'Created to date (YYYY-MM-DD):',
      '#default_value' => '',
  );

  $form['show_br_2'] = array(
      '#type' => 'markup',
      '#markup' => '<br>Optional - search Solr field:<br>',
  );

  $form['search'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'container-inline')
      )
  );

  $form['search']['solrfield'] = array(
    '#size' => '45',
    '#type' => 'textfield',
    '#title' => '',
    '#autocomplete_path' => 'islandora_solr/autocomplete_text_fields',
    '#default_value' => '',
  );

  $form['search']['solrsearch'] = array(
    '#size' => '20',
    '#type' => 'textfield',
    '#title' => '',
    '#default_value' => '',
  );

  $form['show_br_3'] = array(
      '#type' => 'markup',
      '#markup' => '<br><br>',
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate Report')
  );

  return $form;
}

function flvc_report_form_submit($form, &$form_state) {
  $object = $form_state['object'];
  $createdate1 = $form_state['values']['createdate1'];
  $createdate2 = $form_state['values']['createdate2'];
  $solrfield = $form_state['values']['solrfield'];
  $solrsearch = $form_state['values']['solrsearch'];
  $params = array();
  if (strlen($createdate1) > 0) {
    $params = array_merge($params, array('cdate1' => $createdate1));
  }
  if (strlen($createdate2) > 0) {
    $params = array_merge($params, array('cdate2' => $createdate2));
  }
  if ((strlen($solrfield) > 0)&&(strlen($solrsearch) > 0)) {
    $params = array_merge($params, array('solrfield' => str_replace('.','_',$solrfield) . '_mt', 'solrsearch' => $solrsearch));
  }
  $form_state['redirect'] = array('islandora/object/' . $object->id . '/report/results', array('query' => $params));
}

function flvc_report_results(FedoraObject $object) {

  $createdate1 = isset($_GET['cdate1']) ? $_GET['cdate1'] : '';
  $createdate2 = isset($_GET['cdate2']) ? $_GET['cdate2'] : '';
  $datefilter = '';
  if ((strlen($createdate1) > 0)&&(strlen($createdate2) > 0)) {
      $datefilter = 'fgs_createdDate_dt:[' . $createdate1 . 'T00:00:00Z TO ' . $createdate2 . 'T00:00:00Z]';
  }
  else if ((strlen($createdate1) == 0)&&(strlen($createdate2) > 0)) {
      $datefilter = 'fgs_createdDate_dt:[* TO ' . $createdate2 . 'T00:00:00Z]';
  }
  else if ((strlen($createdate1) > 0)&&(strlen($createdate2) == 0)) {
      $datefilter = 'fgs_createdDate_dt:[' . $createdate1 . 'T00:00:00Z TO ' . date('Y-m-d') . 'T00:00:00Z]';
  }

  $solrquery = '*:*';
  $solrfield = isset($_GET['solrfield']) ? $_GET['solrfield'] : '';
  $solrsearch = isset($_GET['solrsearch']) ? $_GET['solrsearch'] : '';
  if ((strlen($solrfield) > 0)&&(strlen($solrsearch) > 0)) {
    $solrquery = $solrfield . ':' . $solrsearch;
  }

  $content_models = array(
    'islandora:collectionCModel',
    'islandora:sp-audioCModel',
    'islandora:sp_basic_image',
    'islandora:binaryObjectCModel',
    'islandora:bookCModel',
    'islandora:compoundCModel',
    'islandora:sp_large_image_cmodel',
    'islandora:newspaperCModel',
    'islandora:sp_pdf',
    'islandora:rootSerialCModel',
    'islandora:sp_videoCModel',
  );

  $parsed_url = parse_url(variable_get('islandora_solr_url', 'http://localhost:8080/solr'));
  $solr = new Apache_Solr_Service($parsed_url['host'], $parsed_url['port'], $parsed_url['path']);

  $msg = 'collection id, audio, basic image, binary, book, collection, compound, large image, newspaper, pdf, serial, video' . "\n";
  $collections = array();
  $collections[] = $object->id;

  $query = 'select $subject $object from <#ri>
           where  $subject <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>
           and walk($subject <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '>
           and $subject <fedora-rels-ext:isMemberOfCollection> $object)
           and $subject <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
           order by $subject';
  $results = $object->repository->ri->itqlQuery($query, 'unlimited');
  foreach ($results as $result) {
    $collections[] = $result['subject']['value'];
  }

  $header = array();
  $header[] = array('data' => t('collection ID'));
  $header[] = array('data' => t('collection'));
  $header[] = array('data' => t('audio'));
  $header[] = array('data' => t('basic image'));
  $header[] = array('data' => t('binary'));
  $header[] = array('data' => t('book'));
  $header[] = array('data' => t('compound'));
  $header[] = array('data' => t('large image'));
  $header[] = array('data' => t('newspaper'));
  $header[] = array('data' => t('pdf'));
  $header[] = array('data' => t('serial'));
  $header[] = array('data' => t('video'));
  $header[] = array('data' => t('total'));
  $rows = array();

  foreach ($collections as $collection) {
    $msg .= $collection;
    $total_count = 0;
    $row = array();
    $row[] = array('data' => $collection);

    foreach ($content_models as $content_model) {
      $filters = array();
      $filters[] = 'RELS_EXT_isMemberOfCollection_uri_ms:info\:fedora/' . str_replace(':','\:',$collection);
      $filters[] = 'RELS_EXT_hasModel_uri_ms:info\:fedora/' . str_replace(':','\:',$content_model);
      if (strlen($datefilter) > 0) {
        $filters[] = $datefilter;
      }
      $params = array(
        'rows' => 0,
        'qt' => variable_get('islandora_solr_request_handler', 'standard'),
        'fq' => $filters,
      );

      // Solr results in JSON format.
      $result_object = json_decode($solr->search($solrquery, 0, 0, $params)->getRawResponse(), TRUE);

      $count = $result_object['response']['numFound'];
      $msg .= ',' . $count;
      $row[] = array('data' => $count);
      $total_count += $count;
    }
    $msg .= "\n";
    $row[] = $total_count;
    $rows[] = $row;
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function flvc_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'islandora_ingest_form')
  {
    if ($form['form_step_id']['#value'] == 'xml_form_builder_metadata_step')
    {
      $form['#validate'][] = 'iid_validate_ingest';
    }
  }

  if ($form_id == 'xml_form_builder_datastream_form')
  {
      if (!isset($form['available_forms']))
      {
          $form['#validate'][] = 'iid_validate_edit';
      }
  }
}

function iid_validate_ingest($form, &$form_state) {

  $errmsg = 'The following IID identifiers already exist: ';
  $error_IID_numbers = '';
  $error_IID_badchars = '';

  // do not validate if no flvc extension with owning institution
  if (!isset($form['extension']['flvc']['owningInst']['#value'])) {
      return;
  }

  $identifier_count = 0;
  if (isset($form['id'])) {
      $identifier_count = count($form['id']);
  }

  $iid_count = 0;
  for ($i=0; $i<$identifier_count; $i++)
  {
    if ( (isset($form['id'][$i]['identifier']['#value']))&&(isset($form['id'][$i]['type']['#value']))&&(strcasecmp(trim($form['id'][$i]['type']['#value']), 'IID') == 0)&&(strlen(trim($form['id'][$i]['identifier']['#value'])) > 0) )
    {
      $iid_count += 1;

      if (preg_match("/[^A-Za-z0-9_\-()\.]/", $form['id'][$i]['identifier']['#value'])) {
        $error_IID_badchars .= $form['id'][$i]['identifier']['#value'] . ' ';
      }

      $solr_url = "http://localhost:8080/solr/select/?version=2.2&start=0&rows=10&indent=on&fl=PID&wt=json&q=mods_identifier_iid_mls%3A" . urlencode(escapeSolrValue(trim($form['id'][$i]['identifier']['#value'])));

      $results = file_get_contents($solr_url);
      $solr_results = array();
      if (isset($results)) {
          $solr_results = json_decode($results, TRUE);
          $numfound = $solr_results['response']['numFound'];
          if ($numfound > 0) {
              //form_set_error('', t('The IID identifier %iidnum already exists.', array('%iidnum' => $form['id'][$i]['identifier']['#value'])));
              $error_IID_numbers = $error_IID_numbers . $form['id'][$i]['identifier']['#value'] . ' ';
          }
      }
    }
  }

  if ($iid_count == 0) {
    form_set_error('', t('You must enter an IID identifier.'));
  }

  if (strlen($error_IID_badchars) > 0) {
    form_set_error('', t('The following IID identifiers have illegal characters (characters can be alphanumeric, underscore, hyphen, period, or parentheses with no spaces): %iidnums', array('%iidnums' => $error_IID_badchars)));
  }

  if (strlen($error_IID_numbers) > 0) {
    form_set_error('', t('The following IID identifiers already exist: %iidnums', array('%iidnums' => $error_IID_numbers)));
  }

  // check format of purls
  $server_error_purls = '';
  $error_purls = '';

  $location_count = 0;
  if (isset($form['location'])) {
      $location_count = count($form['location']);
  }

  $purl_count = 0;
  for ($i=0; $i<$location_count; $i++)
  {
    if ( (isset($form['location'][$i]['locDispLabel']['#value']))&&(isset($form['location'][$i]['URL']['#value']))&&(strcasecmp($form['location'][$i]['locDispLabel']['#value'], 'PURL') == 0)&&(strlen(trim($form['location'][$i]['URL']['#value'])) > 0) )
    {
      $purl_count += 1;
      $url = trim($form['location'][$i]['URL']['#value']);
      if ((strpos($url,'http://purl.flvc.org') === false)&&(strpos($url,'http://purl.fcla.edu') === false)) {
          $server_error_purls = $server_error_purls . $url . ' ';
      }
      else {
          $purl_id = str_replace('http://purl.flvc.org','',str_replace('http://purl.fcla.edu','',$url));
          $hoststr = '/' . $form['extension']['flvc']['owningInst']['#value'] . '/';
          if (stripos($purl_id,$hoststr) !== 0) {
              $error_purls = $error_purls . $url . ' ';
          }
      }
    }
  }

  if (strlen($server_error_purls) > 0) {
    form_set_error('', t('The following PURLs have incorrect server names: %badpurls.  Allowable server names are http://purl.flvc.org or http://purl.fcla.edu only.', array('%badpurls' => $server_error_purls)));
  }

  if (strlen($error_purls) > 0) {
    form_set_error('', t('Allowable PURL domains are %domains.  The following PURLs have incorrect formats: %badpurls', array('%domains' => $form['extension']['flvc']['owningInst']['#value'], '%badpurls' => $error_purls)));
  }

}

function iid_validate_edit($form, &$form_state) {

  $error_IID_numbers = '';
  $error_IID_badchars = '';

  // do not validate if no flvc extension with owning institution
  if (!isset($form['extension']['flvc']['owningInst']['#value'])) {
      return;
  }

  $identifier_count = 0;
  if (isset($form['id'])) {
      $identifier_count = count($form['id']);
  }

  $form_action = explode('/',$form['#action']);
  $edit_object_pid = urldecode($form_action[3]);

  $object = islandora_object_load($edit_object_pid);
  if (in_array('islandora:intermediateCModel', $object->models)) {
    return;
  }

  $iid_count = 0;
  for ($i=0; $i<$identifier_count; $i++)
  {
    if ( (isset($form['id'][$i]['identifier']['#value']))&&(isset($form['id'][$i]['type']['#value']))&&(strcasecmp(trim($form['id'][$i]['type']['#value']), 'IID') == 0)&&(strlen(trim($form['id'][$i]['identifier']['#value'])) > 0) )
    {
      $iid_count += 1;

      if (preg_match("/[^A-Za-z0-9_\-()\.]/", $form['id'][$i]['identifier']['#value'])) {
        $error_IID_badchars .= $form['id'][$i]['identifier']['#value'] . ' ';
      }

      $solr_url = "http://localhost:8080/solr/select/?version=2.2&start=0&rows=10&indent=on&fl=PID&wt=json&q=mods_identifier_iid_mls%3A" . urlencode(escapeSolrValue(trim($form['id'][$i]['identifier']['#value'])));

      $results = file_get_contents($solr_url);
      $solr_results = array();
      if (isset($results)) {
          $solr_results = json_decode($results, TRUE);
          $numfound = $solr_results['response']['numFound'];
          if ($numfound > 0) {
              $object_results = $solr_results['response']['docs'];
              foreach ($object_results as $object_index => $object_result)
              {
                  if ($edit_object_pid != $object_result['PID']) {
                      $error_IID_numbers = $error_IID_numbers . $form['id'][$i]['identifier']['#value'] . ' ';
                  }
              }
          }
      }
    }
  }

  if ($iid_count == 0) {
    form_set_error('', t('You must enter an IID identifier.'));
  }

  if (strlen($error_IID_badchars) > 0) {
    form_set_error('', t('The following IID identifiers have illegal characters (characters can be alphanumeric, underscore, hyphen, period, or parentheses with no spaces): %iidnums', array('%iidnums' => $error_IID_badchars)));
  }

  if (strlen($error_IID_numbers) > 0) {
    form_set_error('', t('The following IID identifiers already exist in other objects: %iidnums', array('%iidnums' => $error_IID_numbers)));
  }

  // check format of purls
  $server_error_purls = '';
  $error_purls = '';

  $location_count = 0;
  if (isset($form['location'])) {
      $location_count = count($form['location']);
  }

  $purl_count = 0;
  for ($i=0; $i<$location_count; $i++)
  {
    if ( (isset($form['location'][$i]['locDispLabel']['#value']))&&(isset($form['location'][$i]['URL']['#value']))&&(strcasecmp($form['location'][$i]['locDispLabel']['#value'], 'PURL') == 0)&&(strlen(trim($form['location'][$i]['URL']['#value'])) > 0) )
    {
      $purl_count += 1;
      $url = trim($form['location'][$i]['URL']['#value']);
      if ((strpos($url,'http://purl.flvc.org') === false)&&(strpos($url,'http://purl.fcla.edu') === false)) {
          $server_error_purls = $server_error_purls . $url . ' ';
      }
      else {
          $purl_id = str_replace('http://purl.flvc.org','',str_replace('http://purl.fcla.edu','',$url));
          $hoststr = '/' . $form['extension']['flvc']['owningInst']['#value'] . '/';
          if ((stripos($purl_id,$hoststr) !== 0)&&(stripos($purl_id,'/flvc/') !== 0)&&(stripos($purl_id,'/fcla/') !== 0)) {
              $error_purls = $error_purls . $url . ' ';
          }
      }
    }
  }

  if (strlen($server_error_purls) > 0) {
    form_set_error('', t('The following PURLs have incorrect server names: %badpurls.  Allowable server names are http://purl.flvc.org or http://purl.fcla.edu only.', array('%badpurls' => $server_error_purls)));
  }

  $domains = $form['extension']['flvc']['owningInst']['#value'];
  if (strcasecmp($domains, 'flvc') != 0) $domains = $domains . ' FLVC';
  $domains = $domains . ' FCLA';

  if (strlen($error_purls) > 0) {
    form_set_error('', t('Allowable PURL domains are %domains.  The following PURLs have incorrect formats: %badpurls', array('%domains' => $domains, '%badpurls' => $error_purls)));
  }

}

function escapeSolrValue($string)
{
    $match = array('\\', '+', '-', '&', '|', '!', '(', ')', '{', '}', '[', ']', '^', '~', '*', '?', ':', '"', ';', ' ');
    $replace = array('\\\\', '\\+', '\\-', '\\&', '\\|', '\\!', '\\(', '\\)', '\\{', '\\}', '\\[', '\\]', '\\^', '\\~', '\\*', '\\?', '\\:', '\\"', '\\;', '\\ ');
    $string = str_replace($match, $replace, $string);
     
    return $string;
}

function flvc_islandora_object_ingested(AbstractObject $object) {

    if (!isset($object['MODS']))
        return;

    $owning_institution = '';
    $purl = '';
    $purl_id = '';

    $mods_str = $object['MODS']->content;
    $mods_xml = new SimpleXMLElement($mods_str);

    // check for owning institution
    $found_owning_inst = FALSE;
    $namespaces = $mods_xml->getNameSpaces(true);
    if ((isset($mods_xml->extension))&&(isset($namespaces['flvc']))) {
        $flvc_entry = $mods_xml->extension->children($namespaces['flvc']);
        if ((count($flvc_entry) == 1)&&(isset($flvc_entry->flvc))) {
            $flvc_fields = $flvc_entry->flvc->children($namespaces['flvc']);
            if (isset($flvc_fields->owningInstitution)&&(strlen($flvc_fields->owningInstitution) > 0)) {
                $found_owning_inst = TRUE;
                $owning_institution = strtolower($flvc_fields->owningInstitution);
            }
        }
    }
    if ($found_owning_inst == FALSE)
        return;

    // check for IID identifier
    $iid_count = 0;
    $digitool_count = 0;
    if (isset($mods_xml->identifier)) {
            foreach ($mods_xml->identifier as $identifier) {
              if (isset($identifier['type'])&&(strcasecmp($identifier['type'], 'IID') == 0)&&(strlen(trim($identifier)) > 0)) {
                $iid_count += 1;
              }
              if (isset($identifier['type'])&&(strcasecmp($identifier['type'], 'digitool') == 0)&&(strlen(trim($identifier)) > 0)) {
                $digitool_count += 1;
              }
            }
    }
    if ($iid_count == 0)
        return;

    // check for PURL
    foreach ($mods_xml->location as $location) {
        $url = $location->url;
        if ((strpos($url,'http://purl.flvc.org') !== false)||(strpos($url,'http://purl.fcla.edu') !== false)) {
            $purl = str_replace('http://purl.fcla.edu','',$url);
            $purl_id = str_replace('http://purl.flvc.org','',$purl);
            // if no digitool id on ingest, go ahead and create the purl
            if ($digitool_count == 0) {
                $command = '/usr/local/islandora/flvc_purl_scripts/prospective/load-prospective --purl ' . escapeshellarg($purl_id) . ' --own ' . $owning_institution . ' --pid ' . $object->id;
                //drupal_set_message(t($command));
                $execout = array();
                exec($command, $execout);
                foreach ($execout as $msg) {
                    if (strpos($msg,'PURLERROR') !== false)
                        drupal_set_message($msg);
                }
            }
        }
    }

    unset($mods_xml);
}

function flvc_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {

    if ($datastream->id != 'MODS')
        return;

    if (!isset($object['MODS']))
        return;

    $owning_institution = '';
    $purl = '';
    $purl_id = '';

    $mods_str = $object['MODS']->content;
    $mods_xml = new SimpleXMLElement($mods_str);

    // check for owning institution
    $found_owning_inst = FALSE;
    $namespaces = $mods_xml->getNameSpaces(true);
    if ((isset($mods_xml->extension))&&(isset($namespaces['flvc']))) {
        $flvc_entry = $mods_xml->extension->children($namespaces['flvc']);
        if ((count($flvc_entry) == 1)&&(isset($flvc_entry->flvc))) {
            $flvc_fields = $flvc_entry->flvc->children($namespaces['flvc']);
            if (isset($flvc_fields->owningInstitution)&&(strlen($flvc_fields->owningInstitution) > 0)) {
                $found_owning_inst = TRUE;
                $owning_institution = strtolower($flvc_fields->owningInstitution);
            }
        }
    }
    if ($found_owning_inst == FALSE)
        return;

    // check for IID identifier
    $iid_count = 0;
    $digitool_count = 0;
    if (isset($mods_xml->identifier)) {
            foreach ($mods_xml->identifier as $identifier) {
              if (isset($identifier['type'])&&(strcasecmp($identifier['type'], 'IID') == 0)&&(strlen(trim($identifier)) > 0)) {
                $iid_count += 1;
              }
              if (isset($identifier['type'])&&(strcasecmp($identifier['type'], 'digitool') == 0)&&(strlen(trim($identifier)) > 0)) {
                $digitool_count += 1;
              }
            }
    }
    if ($iid_count == 0)
        return;

    // check for PURL
    foreach ($mods_xml->location as $location) {
        $url = $location->url;
        if ((strpos($url,'http://purl.flvc.org') !== false)||(strpos($url,'http://purl.fcla.edu') !== false)) {
            $purl = str_replace('http://purl.fcla.edu','',$url);
            $purl_id = str_replace('http://purl.flvc.org','',$purl);
            //if ($owning_institution == 'fsu') {
            // if no digitool id in the MODS, go ahead and update the purl
            if ($digitool_count == 0) {
                $command = '/usr/local/islandora/flvc_purl_scripts/prospective/load-prospective --purl ' . escapeshellarg($purl_id) . ' --own ' . $owning_institution . ' --pid ' . $object->id;
                //drupal_set_message(t($command));
                $execout = array();
                exec($command, $execout);
                foreach ($execout as $msg) {
                    if (strpos($msg,'PURLERROR') !== false)
                        drupal_set_message($msg);
                }
            }
        }
    }

    unset($mods_xml);
}

function flvc_page_alter(&$page) {

  //$content_model = "islandora:collectionCModel";
  $content_model = '';
  $query_root = variable_get('islandora_repository_pid', 'islandora:root');
  $fedora_object = islandora_object_load($query_root);
  $view_pid = '';

  $collection_selected = isset($_GET['collection']) ? $_GET['collection'] : '';
  if (!empty($collection_selected)) {
      $query_pid = $collection_selected;
      $content_model = "islandora:collectionCModel";
  }
  else if (strpos($_SERVER['REQUEST_URI'],'islandora/object/')) {
      $endpos = strpos($_SERVER['REQUEST_URI'], '/', 18);
      if ($endpos === false) {
          $endpos = strpos($_SERVER['REQUEST_URI'], '?', 18);
      }
      if ($endpos) {
          $view_pid = urldecode(substr($_SERVER['REQUEST_URI'],18,$endpos-18));
      }
      else {
          $view_pid = urldecode(substr($_SERVER['REQUEST_URI'],18));
      }
      if ($view_pid == $query_root) {
          $query_pid = $query_root;
          $content_model = "islandora:collectionCModel";
      }
      else {
          $query_pid = $view_pid;
          // query for current object label and hasModel
          $contentquery = 'select $title $content from <#ri>
                    where <info:fedora/' . $query_pid . '> <fedora-model:label> $title
                    and <info:fedora/' . $query_pid . '> <fedora-model:hasModel> $content
                    minus $content <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>';
          $results = $fedora_object->repository->ri->itqlQuery($contentquery, 'unlimited');
          $object_content_type = '';
          $object_title = '';
          if (count($results) > 0) {
              $object_title = $results[0]['title']['value'];
              $object_content_type = $results[0]['content']['value'];
              $content_model = $results[0]['content']['value'];
          }

          if (strpos($object_content_type, 'collectionCModel'))
          {
            $collection_selected = $query_pid;
          }
          else
          {
            // at a non-collection object

            // check for isComponentOf
            $component_of = array();
            $view_object = islandora_object_load($query_pid);
            if ((isset($view_object))&&($view_object != FALSE)) {
              $component_of = $view_object->relationships->get(ISLANDORA_RELS_EXT_URI, 'isComponentOf');
              if (count($component_of) > 0) {
                  $query_pid = $component_of[0]['object']['value'];
              }
            }

            // special processing if at a newspaper issue, newspaper page, book page, intermediate object, or isComponentOf
            if ((strpos($object_content_type, 'pageCModel'))||
                (strpos($object_content_type, 'newspaperIssueCModel'))||
                (strpos($object_content_type, 'newspaperPageCModel'))||
                (strpos($object_content_type, 'intermediateCModel'))||
                (count($component_of) > 0))
            {
                $query_book = 'select $parentObject $collection from <#ri>
                        where (
                        $parentObject <fedora-rels-ext:isMemberOfCollection> $collection and
                        walk(<info:fedora/' . $query_pid . '> <fedora-rels-ext:isMemberOf> $parentObject and $subject <fedora-rels-ext:isMemberOf> $parentObject)
                      )';
                $results = $fedora_object->repository->ri->itqlQuery($query_book, 'unlimited');
                if (count($results) > 0) {
                    $query_pid = $results[0]['parentObject']['value'];
                }
            }

            // get the immediate parent collections
            $query_string = 'select $parentObject $title $content from <#ri>
                        where (
                        $parentObject <fedora-model:label> $title
                        and $parentObject <fedora-model:hasModel> $content
                        and (
                          <info:fedora/' . $query_pid . '> <fedora-rels-ext:isMemberOfCollection> $parentObject
                        )
                        and $parentObject <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
                      )
                      minus $content <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
                      minus $parentObject <mulgara:is> <info:fedora/' . $query_pid . '>
                      order by $title desc';
            $results = $fedora_object->repository->ri->itqlQuery($query_string, 'unlimited');
            $query_pid = '';
            foreach ($results as $result) {
                // only add parent collection if namespace matches site root
                $root_namespace = islandora_get_namespace($query_root);
                if (($root_namespace == 'islandora')||(islandora_get_namespace($result['parentObject']['value']) == $root_namespace)) {
                    if (strlen($query_pid) > 0) $query_pid .= ';';
                    $query_pid .= $result['parentObject']['value'];
                }
            }
            //if (count($results) > 0) {
            //    $query_pid = $results[0]['parentObject']['value'];
            //}
          }
      }
  }
  else {
      $query_pid = $query_root;
  }


    $script = 'var _currentCollection = "' . $query_pid  . '";';
    if (strlen($content_model) > 0) {
        $script .= 'var _currentContentModel = "' . $content_model . '";';
    }

    $search_url = '';
    $solr_query = '*';
    if (strpos($_SERVER['REQUEST_URI'],'islandora/search/')) {
      $search_url = '/islandora/search/';
      $endpos = strpos($_SERVER['REQUEST_URI'], '?', 18);
      if ($endpos) {
          $solr_query = urldecode(substr($_SERVER['REQUEST_URI'],18,$endpos-18));
      }
      else {
          $solr_query = urldecode(substr($_SERVER['REQUEST_URI'],18));
      }

      if (trim($solr_query) == '') $solr_query = '*';

      // check for search type
      $search_type = '';
      $colonpos = strpos($solr_query, ':');
      if ($colonpos > 0) {
          $search_type = substr($solr_query,0,$colonpos);
          if (strpos($search_type,'_') > 0) {
              $solr_query = substr($solr_query,$colonpos+1);
          }
          else {
              $search_type = '';
          }
      }

      $search_url .= '?q=' . urlencode($solr_query);

      if (strlen($search_type) > 0) {
          $search_url .= '&searchtype=' . urlencode($search_type);
      }

      $params = $_GET;

      if (isset($params['f']) && is_array($params['f'])) {
          foreach ($params['f'] as $facet) {
              $search_url .= '&c=' . urlencode($facet);
          }
      }

      if (isset($params['collection'])) {
          $search_url .= '&collection=' . urlencode($params['collection']);
      }

      if (isset($params['page'])) {
          $search_url .= '&page=' . urlencode($params['page']);
      }

      $script .= 'var _trackSearch = "' . $search_url . '";';

    }

    if ((strlen($content_model) > 0)&&($content_model == 'islandora:intermediateCModel')) {
        $pdf_query = <<<EOQ
SELECT ?pdf FROM <#ri> WHERE {
  ?pdf <http://islandora.ca/ontology/relsext#isComponentOf> <info:fedora/!pid>
  }
EOQ;
        $pdf_query = format_string($pdf_query, array(
          '!pid' => $view_pid,
        ));
        $pdf_count = 0;
        $results = $fedora_object->repository->ri->sparqlQuery($pdf_query);
        foreach ($results as $result) {
          $pdf_id = $result['pdf']['value'];
          $pdf_count++;
        }
        if (($pdf_count == 1)&&(!user_is_logged_in())) {
            drupal_goto('islandora/object/' . $pdf_id);
        }

    }

    drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
 
}

/**
 * Implements hook_islandora_edit_datastream_registry().
 */
/*
function flvc_islandora_edit_datastream_registry(AbstractObject $object, AbstractDatastream $datastream) {
  if ($datastream->id == 'TOC') {
    return array(
      array(
        'Name' => t('edit table of contents'),
        'url' => "islandora/tree_edit/{$object->id}/{$datastream->id}",
        'weight' => 6,
      ),
    );
  }
}
*/

/**
 * Admin autocomplete callback which returns solr fields from Luke.
 *
 * @param string $string
 *   String filled out in the autocomplete textfield.
 *
 * @return json
 *   A json array containing the Solr luke values that contain the given string.
 */
function flvc_solr_autocomplete_text_fields($string = '') {

  $luke = islandora_solr_get_luke();
  $result = array();
  foreach ($luke['fields'] as $term => $value) {
    if ((stripos($term, '_mt') !== FALSE)&&(stripos(str_replace('_','.',$term), $string) !== FALSE)) {
      $term2 = str_replace('_mt','',$term);
      $term3 = str_replace('_','.',$term2);

      // Search case insensitive, but keep the case on replace.
      $term_str = preg_replace("/$string/i", "<strong>\$0</strong>", $term3);

      // Add strong elements to highlight the found string.
      $result[$term3] = $term_str . '<strong style="position: absolute; right: 5px;">(' . $value['type'] . ')</strong>';
    }
  }
  // Sort alphabetically.
  ksort($result);

  drupal_json_output($result);
  exit();
}

/**
 * Admin autocomplete callback which returns solr fields from Luke.
 *
 * @param string $string
 *   String filled out in the autocomplete textfield.
 *
 * @return json
 *   A json array containing the Solr luke values that contain the given string.
 */
function flvc_solr_autocomplete_string_fields($string = '') {

  $luke = islandora_solr_get_luke();
  $result = array();
  foreach ($luke['fields'] as $term => $value) {
    if ((stripos($term, '_ms') !== FALSE)&&(stripos(str_replace('_','.',$term), $string) !== FALSE)) {
      $term2 = str_replace('_ms','',$term);
      $term3 = str_replace('_','.',$term2);

      // Search case insensitive, but keep the case on replace.
      $term_str = preg_replace("/$string/i", "<strong>\$0</strong>", $term3);

      // Add strong elements to highlight the found string.
      $result[$term3] = $term_str . '<strong style="position: absolute; right: 5px;">(' . $value['type'] . ')</strong>';
    }
  }
  // Sort alphabetically.
  ksort($result);

  drupal_json_output($result);
  exit();
}

function flvc_google_analytics_all_views() {
  $output = views_embed_view('top_site_searches');
  $output .= views_embed_view('top_facet_searches');
  return $output;
}
